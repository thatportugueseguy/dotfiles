#!/usr/bin/env bash

# fff file explorer
f() {
    fff "$@"
    cd "$(cat "${XDG_CACHE_HOME:=${HOME}/.cache}/fff/.fff_d")"
}

# Tmux attach
tat() {
  session_name="$(basename "$PWD" | tr . -)"

  session_exists() {
    tmux list-sessions | sed -E 's/:.*$//' | grep -q "^$session_name$"
  }

  not_in_tmux() {
    [ -z "$TMUX" ]
  }

  if not_in_tmux; then
    tmux new-session -As "$session_name"
  else
    if ! session_exists; then
      (TMUX='' tmux new-session -Ad -s "$session_name")
    fi
    tmux switch-client -t "$session_name"
  fi
}

# GIT ALIASES
# new branch
nb () {
  local branchName=$1
  git new "${branchName/ze\//}"
  code
}

# open PR - https://github.com/caarlos0/zsh-open-pr/blob/master/git-open-pr.sh
_get_git_repo() {
  echo "$1" | sed -e "s/.git$//" -e "s/.*github.com[:/]\(.*\)/\1/"
}

_build_github_pr_url() {
  # shellcheck disable=SC2039
  local upstream origin branch repo pr_url target
  upstream="$(git config --get remote.upstream.url)"
  origin="$(git config --get remote.origin.url)"
  branch="$(git symbolic-ref --short HEAD)"
  repo="$(_get_git_repo "$origin")"
  pr_url="$repo/pull/new"
  target="develop"
  # test -z "$target" && target=$(git for-each-ref --format='%(upstream:short)' "$(git symbolic-ref -q HEAD)" | cut -d '/' -f 2)
  test -z "$target" && target="master"
  if [ -z "$upstream" ]; then
    echo "$pr_url/$target...$branch"
  else
    # shellcheck disable=SC2039
    local origin_name upstream_name
    origin_name="$(echo "$repo" | cut -f1 -d'/')"
    upstream_name="$(_get_git_repo "$upstream" | cut -f1 -d'/')"
    echo "$pr_url/$upstream_name:$target...$origin_name:$branch"
  fi
}

# shellcheck disable=SC2039
open-pr() {
  # shellcheck disable=SC2039
  local url
  url="$(_build_github_pr_url "$*")"
  if [ "$(uname -s)" = "Darwin" ]; then
    open "$url" 2> /dev/null
  else
    xdg-open "$url" > /dev/null 2> /dev/null
  fi
}

# git clone and npm i
function cai {
  local gitRepo=$1;
  # get the last token by splitter / and strip the 4 last chars
  local repoName=${${gitRepo##*\/}%????};

  git clone $gitRepo $repoName && cd $_ && npm i && code;
}

# git add all and commit
function gac {
	gaa
	gcom "$@";
	gs;
}

#git commit - adds branch automatically an no quotes needed
function gcaa {
	local branch="[$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')]";
	if [ $branch = "[master]" ]
	then
		branch=""
	fi

	local skipVerify=false
	if [ $1 = "-n" ]
	then
		skipVerify=true
		shift
	fi

	local commitMsg="$@";
	local commitMsgLen=${#commitMsg};

	if [ $commitMsgLen -ge 50 ]; then
		read -p "Commit message longer than 50 char. Continue? [y/n]" -n 1 -r
		echo    # (optional) move to a new line
		if [[ ! $REPLY =~ ^[Yy]$ ]]
		then
			echo "Stopping commit. Exiting." ;
			exit 1;
		fi
	fi

	if [ "$skipVerify" = "true" ]
	then
		g commit -m "${branch} ${commitMsg}" --no-verify;
	else
		g commit -m "${branch} ${commitMsg}";
	fi
	gs;
}

function gcom {
	local skipVerify=false
	if [ $1 = "-n" ]
	then
		skipVerify=true
		shift
	fi

	local commitMsg="$@";

	if [ "$skipVerify" = "true" ]
	then
		g commit -m "${commitMsg}" --no-verify;
	else
		g commit -m "${commitMsg}";
	fi
	gs;
}

#git commit amend
function goops {
	git commit -a --amend;
	gs;
}

#git checkout into branch. if the branch exists checkout without -b, otherwise, create it
function gco {
	if [ $1 = "-" ]
	then
		git checkout -;
	else
		local branches=$(git branches | grep $1 | wc -l);

		git checkout $([ $branches -gt 0 ] && echo '' || echo '-b') "$1";
	fi
}

# git push force with lease
function gpf() {
	local branch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p');
	local skipVerify=false
	if [ $# -gt 0 ] && [ $1 = "-n" ]
	then
		skipVerify=true
		shift
	fi

	if [ "$skipVerify" = "true" ]
	then
	git push --no-verify --force-with-lease "$@" origin ${branch};
	else
	git push --force-with-lease "$@" origin ${branch};
	fi
}

#git push normal
function gpn() {
	local branch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p');
	local skipVerify=false
	if [ $# -gt 0 ] && [ $1 = "-n" ]
	then
		skipVerify=true
		shift
	fi

	if [ "$skipVerify" = "true" ]
	then
	git push --no-verify "$@" origin ${branch};
	else
	git push "$@" origin ${branch};
	fi
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# OCAML Atdgen
function genatd () {
  local file="$1"
  atdgen -t "${file}";
  atdgen -j "${file}";
  dune build @fmt --auto-promote;
  clear;
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}


# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}
